/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import MyFTPStorage.Controller;
import MyFTPStorage.Data;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.View;

/**
 *
 * @author TuanNguyen
 */
public class ServerFrame extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public ServerFrame() {
        initComponents();

        setTitle("Server");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextServer = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start Server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextServer.setColumns(20);
        jTextServer.setRows(5);
        jScrollPane1.setViewportView(jTextServer);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(jButton1)
                .addContainerGap(242, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ServerSocket server;
    private ServerSocket server2;
    private Socket socketServer;
    private Socket socketServer2;
    private ObjectInputStream inServer;
    private ObjectInputStream inServer2;
    private Thread serverThread;
    private Thread serverThread2;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        serverThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    server = new ServerSocket(8888);
                    jTextServer.append("Server starting ...\n");

                    socketServer = server.accept();

                    // nhan du lieu tu client gui len
                    inServer = new ObjectInputStream(socketServer.getInputStream());

                    jTextServer.append("New client has been connected .......\n");
                    while (true) {

                        Data data = (Data) inServer.readObject();
                        // Đồng bộ hóa object
                        System.out.println("Server đang đợi nhận data ........");
                        synchronized (data) {
                            // kiểm tra tồn tại file trong folder Server
                            if (Controller.checkExistFile(data.getName(), "Server")) {
//                                Thread.sleep(5000);
                                jTextServer.append("File exists in folder Server....... \n");
                            } else {
                                jTextServer.append("Đang ghép file....... \n");

                                // ghép mảng byte -> file rồi ghi file ra thư mục Server
                                Controller.mergeFile(data.getFile(), "Server//" + data.getName() + "");
                                
                                System.out.println("Server nhận data thành công \n");
                                jTextServer.append("Received " + data.getName() + " from client ....... \n");
                            }
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        serverThread.start();

        // Thread lắng nghe yêu cầu client
        serverThread2 = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    server2 = new ServerSocket(8890);

                    socketServer2 = server2.accept();

                    // nhan du lieu tu client gui len
                    inServer2 = new ObjectInputStream(socketServer2.getInputStream());

                    while (true) {
                        Data data2 = (Data) inServer2.readObject();
                        synchronized (data2) {
                            if (data2.isPauseUpload()) {
                                serverThread.suspend();
                                jTextServer.append("Client paused upload ....... \n");
                            }
                            if (data2.isResumeUpload()) {
                                serverThread.resume();
                                jTextServer.append("Client resummed upload ....... \n");
                            }
                            if (data2.isStopUpload()) {
                                jTextServer.append("Client stopped upload please start and connect server again ....... \n");
                                // close
                                server.close();
                                socketServer.close();
                                inServer.close();
                                server2.close();
                                socketServer2.close();
                                inServer2.close();
                                // stop thread
                                serverThread.stop();
                                serverThread2.stop();
                            }
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        serverThread2.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                }
                new ServerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextServer;
    // End of variables declaration//GEN-END:variables
}
