/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import MyFTPStorage.*;
import MyFTPStorage.Data;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.View;

/**
 *
 * @author TuanNguyen
 */
public class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public ClientFrame() {
        initComponents();
        setTitle("Client");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextClient = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextListFile = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        labelFileName = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextClient.setColumns(20);
        jTextClient.setRows(5);
        jScrollPane1.setViewportView(jTextClient);

        jScrollPane3.setViewportView(jTextListFile);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
        );

        jButton1.setText("Upload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Dowload");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Stop");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Resum");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Show");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton7.setText("Connect");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Pause");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7))
                    .addComponent(labelFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5, jButton7, jButton8});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(labelFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5, jButton7, jButton8});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private Socket socketClient;
    private ServerSocket serverReceive;
    private Socket socketReceive;
    private Socket socketClient2;
    private boolean enablePortDowload = false;
    private ObjectInputStream in;
    private ObjectOutputStream outServer;
    private ObjectOutputStream outClient;
    private ObjectOutputStream outClient2;
    private Thread clientThread;
    private DefaultListModel mod = new DefaultListModel();
    public static boolean dowload = false;
    public static boolean upload = false;
    public static boolean stopUpload = false;
    public static boolean resumeUpload = false;
    public static boolean pauseUpload = false;

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        try {
            socketClient = new Socket("localhost", 8888);
            System.out.println("Connecting to server ....... \n");
            Thread.sleep(6000);
            // gui lenh len server
            outClient = new ObjectOutputStream(socketClient.getOutputStream());
            outClient.flush();
            jTextClient.append("Connect success ...\n");

            socketClient2 = new Socket("localhost", 8890);
            Thread.sleep(6000);
            outClient2 = new ObjectOutputStream(socketClient2.getOutputStream());
            outClient2.flush();

        } catch (Exception e) {
            jTextClient.append("Server isn't running ...\n");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        upload = true;
        dowload = false;
        new Thread(new Runnable() {

            @Override
            public void run() {

                try {
                    JFileChooser chooser = new JFileChooser();
                    int i = chooser.showOpenDialog(chooser);
                    if (i == JFileChooser.APPROVE_OPTION) {
                        File file = chooser.getSelectedFile();

                        Data data = new Data();
                        System.out.println("Data đang đợi đẩy đi ........");
                        synchronized (data) {
                            System.out.println("Đang chia mảnh file ........ ");
                            Thread.sleep(10000);
                            jTextClient.append("Chia mảnh file hoàn tất....... \n");
                            // chia file thành 1 mảng byte
                            byte[] buffer = Controller.splitFile(file);
                            data.setFile(buffer);
                            System.out.println("Số mảnh file " + buffer.length + "\n");
                            data.setName(file.getName());

                            // đẩy dữ liệu lên server
                            outClient.writeObject(data);
                            outClient.flush();
                            System.out.println("Đẩy đi thành công \n");

                            jTextClient.append("send " + data.getName() + " to server ......\n");
                        }
                    }
                } catch (Exception e) {
                    jTextClient.append("Server isn't running ...\n");
                }
            }
        }).start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Show list file có trong Server
        if (mod.size() != 0) {
            mod.removeAllElements();
        }
        jTextListFile.setModel(mod);
        ArrayList<String> danhSachFile = new ArrayList<String>();
        danhSachFile = Controller.getListFile("Server");
        for (String nameFile : danhSachFile) {
            mod.addElement(nameFile);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dowload = true; // hiện tại đang dowload
        upload = false;

        clientThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    if (!enablePortDowload) {
                        // lang nghe port 8889
                        serverReceive = new ServerSocket(8889);
                        jTextClient.append("Receiving file from server ....... \n");
                    }

                    socketReceive = serverReceive.accept(); // chap nhan ket noi
                    enablePortDowload = true;
                    in = new ObjectInputStream(socketReceive.getInputStream());
                    
                    while (true) {
                        Data data = (Data) in.readObject();
                        // Đồng bộ hóa object
                        synchronized (data) {
                            // kiểm tra tồn tại file trong folder Client
                            Thread.sleep(5000);
                            if (Controller.checkExistFile(data.getName(), "Client")) {
                                jTextClient.append("File exists in folder Client ....... \n");
                            } else {
                                jTextClient.append("Đang ghép file....... \n");
                                Thread.sleep(5000);
                                // ghép mảng byte -> file rồi ghi file ra thư mục Client
                                Controller.mergeFile(data.getFile(), "Client//" + data.getName() + "");
                                System.out.println("Ghép file hoàn tất ....... \n");
//                            Thread.sleep(5000);
                                jTextClient.append("Received file ....... \n");
                            }
                        }
                    }
                } catch (Exception e) {
//                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        });
        clientThread.start();

        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    socketClient = new Socket("localhost", 8889);

                    // gui lenh len server
                    outServer = new ObjectOutputStream(socketClient.getOutputStream());

                    File file = new File("Server//" + mod.getElementAt(jTextListFile.getSelectedIndex()) + "");
                    Data dataServer = new Data();

                    synchronized (dataServer) {
                        System.out.println("Đang chia mảnh file để tải xuống .......");
                        Thread.sleep(5000);
                        jTextClient.append("Chia mảnh file để tải xuống hoàn tất....... \n");
                        // chia file thành 1 mảng byte
                        byte[] buffer = Controller.splitFile(file);

                        dataServer.setFile(buffer);
                        dataServer.setName(file.getName());
                        System.out.println("Số mảnh file " + buffer.length);

                        // ghi dữ liệu ra đối tượng data -> server
                        outServer.writeObject(dataServer);
                        outServer.flush();
                    }
                } catch (Exception e) {
//                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        }).start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // đang dowload
        if (dowload) {
            clientThread.suspend();
            jTextClient.append("Paused dowload ....... \n");
        }
        // đang upload
        if (upload) {
            Data data = new Data();
            jTextClient.append("Paused upload ....... \n");
            pauseUpload = true;

            try {
                data.setPauseUpload(pauseUpload);
                outClient2.writeObject(data);
                outClient2.flush();

            } catch (Exception e) {
                jTextClient.append("Server isn't running ...\n");
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // đang dowload
        if (dowload) {
            clientThread.stop();
            jTextClient.append("Stopped dowload ....... \n");
            dowload = false;
        }
        // đang upload
        if (upload) {
            Data data = new Data();
            jTextClient.append("Stopped upload ....... \n");
            upload = false;
            stopUpload = true;

            try {
                data.setStopUpload(stopUpload);
                outClient2.writeObject(data);
                outClient2.flush();

            } catch (Exception e) {
                jTextClient.append("Server isn't running ...\n");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // đang dowload
        if (dowload) {
            jTextClient.append("Resummed dowload ....... \n");
            clientThread.resume();
            try {
                clientThread.sleep(7000);
            } catch (InterruptedException ex) {
                jTextClient.append("System error ....... \n");
            }
        }
        // đang upload
        if (upload) {
            Data data = new Data();
            jTextClient.append("Resuming upload ....... \n");
            resumeUpload = true;

            try {
                data.setResumeUpload(resumeUpload);
                outClient2.writeObject(data);
                outClient2.flush();

            } catch (Exception e) {
                jTextClient.append("Server isn't running ...\n");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                }
                new ClientFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTextArea jTextClient;
    private javax.swing.JList jTextListFile;
    private javax.swing.JLabel labelFileName;
    // End of variables declaration//GEN-END:variables
}
